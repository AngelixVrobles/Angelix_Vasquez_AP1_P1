@page "/Aportes/Index"
@rendermode InteractiveServer
@inject AporteService aporteService
@inject NavigationManager navigation
@using System.Globalization

<PageTitle>Consulta de Aportes</PageTitle>

<div class="container mt-3">
    <div class="card shadow-lg p-3">
        <div class="card-header mb-1 text-center bg-white border-0">
            <h2 class="card-title"><strong>Consulta de Aportes</strong></h2>
        </div>

        <div class="row mb-2">
            <div class="col-md-3">
                <label class="form-label"><strong>Filtrar por</strong></label>
                <InputSelect class="form-select" @bind-Value="filtro">
                    <option value="" disabled selected>Elija una opción</option>
                    <option value="Id">Id</option>
                    <option value="Nombre">Nombre</option>
                    <option value="Monto">Monto</option>
                </InputSelect>
            </div>

            <div class="col-md-4">
                <label class="form-label"><strong>Búsqueda</strong></label>
                <div class="input-group">
                    <input class="form-control" @bind="valorFiltro" placeholder="Buscar" />
                    <button type="button" class="btn btn-primary bi bi-search" @onclick="Buscar">
                        Buscar
                    </button>
                </div>
            </div>

            <div class="col-5 text-end">
                <a href="Registro/Create" class="btn btn-success">
                    <span class="bi bi-plus-square"></span> Crear
                </a>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-3">
                <label class="form-label"><strong>Desde Fecha</strong></label>
                <InputDate class="form-control" @bind-Value="Desde" />
            </div>
            <div class="col-md-3">
                <label class="form-label"><strong>Hasta Fecha</strong></label>
                <InputDate class="form-control" @bind-Value="Hasta" />
            </div>
        </div>

        <table class="table table-hover table-bordered text-center mt-4">
            <thead class="table-striped text-black">
                <tr>
                    <th>Id</th>
                    <th>Nombre</th>
                    <th>Monto</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var aporte in aportes)
                {
                    <tr>
                        <td>@aporte.AporteId</td>
                        <td>@aporte.Nombres</td>
                        <td>@aporte.Monto.ToString("N2", CultureInfo.CurrentCulture)</td>
                        <td class="text-center">
                            <a href="/Aporte/Edit/@aporte.AporteId" class="btn btn-outline-success bi bi-pencil-fill"></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="card-footer d-flex justify-content-between">
            <label><strong>Cantidad: @aportes.Count()</strong></label>
            <label class="ms-auto">
                <strong>Total : @aportes.Sum(c => c.Monto).ToString("C2", CultureInfo.CurrentCulture)</strong>
            </label>
        </div>
    </div>
</div>

@code {
    public List<Aportes> aportes = new List<Aportes>();
    private string filtro = "";
    private string valorFiltro = "";
    private DateTime Desde { get; set; } = DateTime.MinValue;
    private DateTime Hasta { get; set; } = DateTime.MaxValue;

    protected override async Task OnInitializedAsync()
    {
        await LoadAportes();
    }

    private async Task LoadAportes()
    {
        aportes = await aporteService.Listar(t => true);
    }

    private async Task Buscar()
    {
        if (!string.IsNullOrWhiteSpace(valorFiltro))
        {
            if (filtro == "Id" && int.TryParse(valorFiltro, out int AporteId))
            {
                aportes = await aporteService.Listar(t => t.AporteId == AporteId);
            }
            else if (filtro == "Nombre")
            {
                aportes = await aporteService.Listar(t => t.Nombres != null && t.Nombres.ToLower().Contains(valorFiltro.ToLower()));
            }
            else if (filtro == "Monto" && float.TryParse(valorFiltro, out float Monto))
            {
                aportes = await aporteService.Listar(t => t.Monto == Monto);
            }
        }
        else
        {
            await LoadAportes();
        }
    }
}
